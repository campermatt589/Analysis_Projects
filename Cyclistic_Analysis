install.packages("tidyverse")
install.packages("lubridate")
install.packages("ggplot2")


library(tidyverse)  #helps wrangle data
library(lubridate)  #helps wrangle date attributes
library(ggplot2)  #helps visualize data

getwd()
setwd("/Users/campe/OneDrive/Documents/Case_Study_1")

q2_2019 <- read_csv("Divvy_Trips_2019_Q2.csv")
q3_2019 <- read_csv("Divvy_Trips_2019_Q3.csv")
q4_2019 <- read_csv("Divvy_Trips_2019_Q4.csv")
q1_2020 <- read_csv("Divvy_Trips_2020_Q1.csv")

colnames(q2_2019)
colnames(q3_2019)
colnames(q4_2019)
colnames(q1_2020)

#Making the Datasets from Q2, Q3, and Q4 consistent with Q1_2020 and onward

(q4_2019 <- rename(q4_2019, 
                   ride_id=trip_id, 
                   rideable_type=bikeid, 
                   started_at=start_time, 
                   ended_at=end_time,
                   start_station_name=from_station_name,
                   start_station_id=from_station_id,
                   end_station_name=to_station_name,
                   end_station_id=to_station_id,
                   member_casual=usertype
                   ))
(q3_2019 <- rename(q3_2019,
                   ride_id=trip_id,
                   rideable_type=bikeid,
                   started_at=start_time,
                   ended_at=end_time,
                   start_station_name=from_station_name,
                   start_station_id=from_station_id,
                   end_station_name=to_station_name,
                   end_station_id=to_station_id,
                   member_casual=usertype
                   ))
(q2_2019 <- rename(q2_2019,
                   ride_id= "01 - Rental Details Rental ID",
                   rideable_type= "01 - Rental Details Bike ID",
                   started_at="01 - Rental Details Local Start Time",
                   ended_at = "01 - Rental Details Local End Time",
                   start_station_name = "03 - Rental Start Station Name",
                   start_station_id = "03 - Rental Start Station ID",
                   end_station_name = "02 - Rental End Station Name",
                   end_station_id = "02 - Rental End Station ID",
                   member_casual = "User Type"
                   ))
#Structure of the Dataframes

str(q2_2019)
str(q3_2019)
str(q4_2019)
str(q1_2020)

# Convert ride_id and rideable_type to character so that they can stack correctly

q4_2019 <- mutate(q4_2019, ride_id = as.character(ride_id),
                  rideable_type = as.character(rideable_type))
q3_2019 <- mutate(q3_2019, ride_id = as.character(ride_id),
                  rideable_type = as.character(rideable_type))
q2_2019 <- mutate(q2_2019, ride_id = as.character(ride_id),
                  rideable_type = as.character(rideable_type))

#Merging four data frames into one
all_trips <- bind_rows(q2_2019,q3_2019,q4_2019,q1_2020)

# Remove lat, long, birthyear, and gender fields as this data was dropped beginning in 2020

all_trips <- all_trips %>%  
  select(-c(start_lat, start_lng, end_lat, end_lng, birthyear, gender, "01 - Rental Details Duration In Seconds Uncapped", "05 - Member Details Member Birthday Year", "Member Gender", "tripduration"))

#Reassigns Subscriber to member and customer to casual
all_trips <-  all_trips %>% 
  mutate(member_casual = recode(member_casual
                                ,"Subscriber" = "Member"
                                ,"Customer" = "Casual"
                                ,"casual" = "Casual"
                                ,"member" = "Member"))

# Check to make sure the proper number of observations were reassigned

table(all_trips$member_casual)

#Add Dates, months, days, and years

all_trips$date <- as.Date(all_trips$started_at) #The default format is yyyy-mm-dd
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")

#Adds ride length

all_trips$ride_length <- difftime(all_trips$ended_at,all_trips$started_at)

#Checks the structure of the columns

str(all_trips)

#turns ride length into a numeric value
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length))
is.numeric(all_trips$ride_length)

all_trips_v2 <- all_trips[!(all_trips$start_station_name == "HQ QR" | all_trips$ride_length<0),]

# Descriptive analysis on ride_length (all figures in seconds)

mean(all_trips_v2$ride_length) #straight average (total ride length / rides)
median(all_trips_v2$ride_length) #midpoint number in the ascending array of ride lengths
max(all_trips_v2$ride_length) #longest ride
min(all_trips_v2$ride_length) #shortest ride

# Compare members and casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = mean)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = median)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = max)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = min)

# See the average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)

# Reordering the Days to go from Sunday to Saturday
all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))

# Now, let's run the average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)

# analyze ridership data by type and weekday
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>%  #creates weekday field using wday()
  group_by(member_casual, weekday) %>%  #groups by usertype and weekday
  summarise(number_of_rides = n()							#calculates the number of rides and average duration 
            ,average_duration = mean(ride_length)) %>% 		# calculates the average duration
  arrange(member_casual, weekday)								# sorts

# Let's visualize the number of rides by rider type
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge")  +
    labs(title="Rides By Rider Type",
       subtitle = "The number of rides by each type of rider on each day", 
       x = "Days of the Week", 
       y = "Number of Rides") +
    guides(fill = guide_legend(title = "Type of Rider"))
  

# Let's create a visualization for average duration
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
  geom_col(position = "dodge") + 
  labs(title="Average Time vs Rider Type",
       subtitle = "The average ride duration by each type of rider on each day", 
       x = "Days of the Week", 
       y = "Average Trip Duration (in seconds)") +
  guides(fill = guide_legend(title = "Type of Rider"))

#Creates A Dataframe and a new csv document to make visualizations with
counts <- aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)
write.csv(counts, file = '/Users/campe/OneDrive/Documents/Case_Study_1/avg_ride_length.csv')


